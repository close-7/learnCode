/**
 * 给定一个二叉树，找出其最大深度。

二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

 */

 /**
  * 解题思路
  * 求最大深度，考虑使用深度优先遍历
  * 在深度优先遍历过程中，记录每个节点所在的层级，找出最大的层级即可
  */

  /**
   * 解题步骤
   * 1.新建一个变量，记录最大深度
   * 2.深度遍历整颗树，记录每个节点的层级，同时不断刷新最大深度这个变量
   * 3.遍历结束返回最大深度这个变量
   */

  var maxDepth = function(root) {
    let res = 0;
    const dfs = (n,l) => {
        if(!n){return;}
        // console.log(n.val,l)
        if(!n.left&&!n.right){
          res = Math.max(res,l)
        } 
        dfs(n.left,l+1);
        dfs(n.right,l+1)
    }
    dfs(root,1)
    return res
  };
  //时间赋值度O(n),空间复杂度O(n)或者O(logn)
